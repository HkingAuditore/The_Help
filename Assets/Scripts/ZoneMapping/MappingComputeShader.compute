// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct TriangleData
{
    float2 a;
    float2 b;
    float2 c;
};

RWStructuredBuffer<TriangleData> dataBuffer;


float triangleCount;
RWTexture2D<float4> Result;

int IsInTriangle(float2 p, float2 a, float2 b, float2 c)
{
    float2 v0 = c - a;
    float2 v1 = b - a;
    float2 v2 = p - a;

    float dot00 = dot(v0, v0);
    float dot01 = dot(v0, v1);
    float dot02 = dot(v0, v2);
    float dot11 = dot(v1, v1);
    float dot12 = dot(v1, v2);

    float invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
    float u = (dot11 * dot02 - dot01 * dot12) * invDenom;
    float v = (dot00 * dot12 - dot01 * dot02) * invDenom;

    return ((u >= 0) && (v >= 0) && ((u + v) < 1)) ? 1 : 0;
}

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    int isInZone = 0;
    float3 col = float3(0, 0, 0);
    for (int i = 0; i < triangleCount; i++)
    {
        isInZone = IsInTriangle(id.xy, dataBuffer[i].a, dataBuffer[i].b, dataBuffer[i].c);
        if (isInZone == 1) break;
    }
    Result[id.xy] = float4(isInZone, isInZone, isInZone, 0);
}
